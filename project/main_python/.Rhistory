real.list[[i]] <- paste(as.character(real[i, 1]),
as.character(real[i, 2]),
sep = ","
)
}
check <- bond.pairs %in% real.list
if (all(check) == T) {
vec.list <- list()
for (file in files) {
vec.list[[match(file, files)]] <- atom.vectors(file)
names(vec.list)[[match(file, files)]] <- gsub("\\D+", "", stringr::str_sub(file, start = 5, end = 7))
}
units <- list()
for (i in 1:length(paired)) {
units[[i]] <- cbind(
vec.list[[as.character(paired[[i]][[1]])]],
vec.list[[as.character(paired[[i]][[2]])]]
)
units[[i]][, 7:9] <- xyz[paired[[i]][[1]], ] - xyz[paired[[i]][[2]], ]
}
info <- dot.prod.info(list.files(pattern = "info"))
max.list <- list()
for (i in 1:length(units)) {
units[[i]][, 7] <- (xyz[paired[[i]][[1]], ] - xyz[paired[[i]][[2]], ])[[1]]
units[[i]][, 8] <- (xyz[paired[[i]][[1]], ] - xyz[paired[[i]][[2]], ])[[2]]
units[[i]][, 9] <- (xyz[paired[[i]][[1]], ] - xyz[paired[[i]][[2]], ])[[3]]
units[[i]][, 10] <- NA
units[[i]][, 11] <- list(info[1, ])
units[[i]] <- units[[i]][units[[i]]$V11 > threshold, ]
rows <- dim(units[[i]])[1]
for (j in 1:rows) {
units[[i]][j, 10] <- abs(pracma::dot(as.matrix(units[[i]][j, 1:3]), as.matrix(units[[i]][j, 7:9]))) +
abs(pracma::dot(as.matrix(units[[i]][j, 4:6]), as.matrix(units[[i]][j, 7:9])))
}
}
for (i in 1:length(units)) {
max.list[[i]] <- which.max(units[[i]][, 10])
}
max.list <- data.frame(max.list)
uni <- data.frame(matrix(nrow = 1, ncol = dim(max.list)[2]))
for (i in 1:dim(max.list)[2]) {
uni[1, i] <- units[[i]][max.list[1, i], 11]
}
for (i in 1:dim(uni)[2]) {
colnames(uni)[[i]] <- gsub("\\D+", "-", as.character(paired[i]))
}
row.names(uni) <- directory
on.exit(setwd(orig.wd))
return(uni)
}
else {
print(directory)
print("The following bonds do not exist - check atom numbering")
print(bond.pairs[match(F, check)])
setwd("..")
}
}
df.gen.vib <- function(path, threshold = 1350) {
molecules <- list.files(getwd())
mol.list <- list()
atom.pairs <- readline("Your atom pairs: ")
for (molecule in molecules) {
mol.list[[match(molecule, molecules)]] <- gen.vib(molecule, atom.pairs, threshold)
}
vib.dafr <- do.call(rbind, mol.list)
row.names(vib.dafr) <- molecules
return(vib.dafr)
}
diversitree::set.defaults(df.gen.vib, getwd())
ring.vibs <- function(mol.dir, ordered.ring.atoms) {
setwd(mol.dir)
freq <- dot.prod.info(list.files(pattern = "info"))
atoms <- strsplit(ordered.ring.atoms, " ")
unlisted.atoms <- unlist(atoms)
numeric.atoms <- as.numeric(unlisted.atoms)
paired.atoms <- split(
numeric.atoms,
ceiling(seq_along(numeric.atoms) / 2)
)
atoms_info <- split(
unlisted.atoms,
ceiling(seq_along(unlisted.atoms) / 2)
)
xyz <- data.frame(read.csv(list.files(pattern = "standard_"), header = F, col.names = c('atom', 'x', 'y', 'z')))
xyz <- xyz[, -1]
xyz <- sapply(xyz, as.numeric)
xyz <- xyz[numeric.atoms, ]
pa <- xyz[1, 1:3] - xyz[2, 1:3]
atom.one <- atom.vectors(list.files(pattern = paste("_", atoms_info[[1]][[1]], "_", sep = "")))
atom.two <- atom.vectors(list.files(pattern = paste("_", atoms_info[[3]][[1]], "_", sep = "")))
atom.three <- atom.vectors(list.files(pattern = paste("_", atoms_info[[2]][[1]], "_", sep = "")))
atom.four <- atom.vectors(list.files(pattern = paste("_", atoms_info[[1]][[2]], "_", sep = "")))
atom.five <- atom.vectors(list.files(pattern = paste("_", atoms_info[[2]][[2]], "_", sep = "")))
atom.six <- atom.vectors(list.files(pattern = paste("_", atoms_info[[3]][[2]], "_", sep = "")))
sum.1.3.5 <- list()
for (i in 1:dim(atom.one)[1]) {
sum.1.3.5[[i]] <- atom.one[i, ] + atom.three[i, ] + atom.five[i, ]
}
vec.sum.1.3.5 <- as.matrix(do.call(rbind, sum.1.3.5))
sum.2.4.6 <- list()
for (i in 1:dim(atom.two)[1]) {
sum.2.4.6[[i]] <- atom.two[i, ] + atom.four[i, ] + atom.six[i, ]
}
vec.sum.2.4.6 <- as.matrix(do.call(rbind, sum.2.4.6))
prods <- list()
for (i in 1:dim(vec.sum.1.3.5)[1]) {
prods[[i]] <- pracma::dot(vec.sum.1.3.5[i, ], vec.sum.2.4.6[i, ])
}
prod.vec.sums <- data.frame(do.call(rbind, prods))
prod.vec.sums[, 2] <- data.table::transpose(as.list(freq[1, ]))
for (i in 1:dim(prod.vec.sums)[1]) {
prod.vec.sums[i, 3] <- abs(sin(angle(vec.sum.2.4.6[i, ], pa)))
}
pvec.filter <- dplyr::filter(prod.vec.sums, prod.vec.sums$do.call.rbind..prods. != 0)
vec.prod.filtered <- dplyr::filter(pvec.filter, pvec.filter$V2 > 1550 &
abs(pvec.filter$do.call.rbind..prods.) > 0.1)
dupli.check <- duplicated(vec.prod.filtered$V3) |
duplicated(vec.prod.filtered$V3, fromLast = T)
if (any(dupli.check)) {
right.one <- which.max(abs(vec.prod.filtered[dupli.check,]$do.call.rbind..prods.))
unduplicated <- vec.prod.filtered[dupli.check,][right.one,]
vec.prod.filtered <- rbind(unduplicated, vec.prod.filtered[!dupli.check,])
}
result <- data.frame(
vec.prod.filtered[which.max(vec.prod.filtered[, 3]), 2],
asin(max(vec.prod.filtered[, 3]))*(180/pi),
vec.prod.filtered[which.min(vec.prod.filtered[, 3]), 2],
asin(min(vec.prod.filtered[, 3]))*(180/pi)
)
colnames(result) <- c("cross",'cross.angle', "para", 'para.angle')
if (dim(result)[1] == 0) {
vec.prod.filtered <- dplyr::filter(pvec.filter, pvec.filter$V2 > 1550 &
pvec.filter$V2 < 1750)
result <- data.frame(
vec.prod.filtered[which.max(vec.prod.filtered[, 3]), 2],
asin(max(vec.prod.filtered[, 3]))*(180/pi),
vec.prod.filtered[which.min(vec.prod.filtered[, 3]), 2],
asin(min(vec.prod.filtered[, 3]))*(180/pi)
)
colnames(result) <- c("cross",'cross.angle', "para", 'para.angle')
print(basename(getwd()))
print('Dot products are lower than 0.1 - returning the default 1750 - 1550 1/cm')
}
setwd("..")
return(result)
}
ring.vib.df <- function(path) {
molecules <- list.dirs(recursive = F, full.names = F)
input <- readline("Ring atoms - by order -> primary axis (para first), ortho atoms and meta atoms: ")
ring.vib.list <- list()
for (molecule in molecules) {
ring.vib.list[[match(molecule, molecules)]] <- ring.vibs(molecule, input)
}
ring.vib.dafr <- data.frame(data.table::rbindlist(ring.vib.list))
row.names(ring.vib.dafr) <- molecules
return(ring.vib.dafr)
}
diversitree::set.defaults(ring.vib.df, getwd())
# 8 check for imaginary frequencies and report
ground.state <- function(path) {
molecules <- list.dirs(path, recursive = F, full.names = F)
Ground_State <- vector()
for (molecule in molecules) {
setwd(molecule)
imaginary <- dot.prod.info(list.files(pattern = 'info'))
Ground_State[[match(molecule, molecules)]] <- all(!(imaginary[1, ] < 0))
setwd('..')
}
imag.report.dafr <- data.frame(Ground_State)
row.names(imag.report.dafr) <- molecules
return(imag.report.dafr)
}
# 7 Produce data set
comp.set <- function(path, dipole.mode = 'gaussian', radii = 'CPK') {
molecules <- list.dirs(recursive = F, full.names = F)
ring <- ring.vib.df()
vib <- df.gen.vib()
if (dipole.mode == 'compute') {
dip <- npa_dipole.df()
}
if (dipole.mode == 'gaussian') {
dip <- dip.gaussian.df()
}
nbo <- nbo.df()
if (radii == 'CPK') {
ste <- steRimol.df(radii = 'CPK')
}
if (radii == 'bondi') {
ste <- steRimol.df(radii = 'bondi')
}
atom.dist <- readline('Distances - Atom pairs: ')
B.L <- bond.lengths(atom.dist)
pol <- pol.df()
dih_answer <- readline("Do you want to compute any angles/dihedrals? y/n ")
if (dih_answer == "y") {
cat("        Insert a list of atom triads/quartets for which you wish to have angles/dihedrals.\n
For several angles/dihedrals, insert triads/quartets with a double space between them.\n
Make sure there are spaces between atoms as well.\n
For example - 1 2 3  1 2 3 4 will give angle(1, 2, 3) and dihedral(1, 2, 3, 4)")
vect <- readline("Insert a list of atom triads/quartets for which you wish to have angles/dihedrals")
dih <- df.angles(unlist(strsplit(vect, '  ')))
comp <- cbind(ring, vib, B.L, dip, nbo, ste, dih, pol)
} else {
if (dih_answer == "n") {
comp <- cbind(ring, vib, B.L, dip, nbo, ste, pol)
}
}
row.names(comp) <- molecules
for (i in 1:length(comp)) {
if (class(comp[[i]]) == "character") {
comp[[i]] <- as.numeric(comp[[i]])
}
}
return(comp)
}
diversitree::set.defaults(comp.set, getwd())
comp.set.hetero <- function(path, dipole.mode = 'gaussian', radii = 'CPK') {
molecules <- list.dirs(recursive = F, full.names = F)
vib <- df.gen.vib()
if (dipole.mode == 'compute') {
dip <- npa_dipole.df()
}
if (dipole.mode == 'gaussian') {
dip <- dip.gaussian.df()
}
nbo <- nbo.df()
if (radii == 'CPK') {
ste <- steRimol.df(radii = 'CPK')
}
if (radii == 'bondi') {
ste <- steRimol.df(radii = 'bondi')
}
atom.dist <- readline('Distances - Atom pairs: ')
B.L <- bond.lengths(atom.dist)
pol <- pol.df()
dih_answer <- readline("Do you want to compute any angles/dihedrals? y/n ")
if (dih_answer == "y") {
cat("        Insert a list of atom triads/quartets for which you wish to have angles/dihedrals.\n
For several angles/dihedrals, insert triads/quartets with a double space between them.\n
Make sure there are spaces between atoms as well.\n
For example - 1 2 3  1 2 3 4 will give angle(1, 2, 3) and dihedral(1, 2, 3, 4)")
vect <- readline("Insert a list of atom triads/quartets for which you wish to have angles/dihedrals")
dih <- df.angles(unlist(strsplit(vect, '  ')))
comp <- cbind(vib, dip, B.L, nbo, ste, dih, pol)
} else {
if (dih_answer == "n") {
comp <- cbind(vib, dip, B.L, nbo, ste, pol)
}
}
row.names(comp) <- molecules
for (i in 1:length(comp)) {
if (class(comp[[i]]) == "character") {
comp[[i]] <- as.numeric(comp[[i]])
}
}
return(comp)
}
diversitree::set.defaults(comp.set.hetero, getwd())
modelling.data <- function(datasets, output_file) {
print('make sure you are in a neutral directory - this creates a lot of csv files!')
output = data.table::fread(output_file)[, 2]
dir.name <- readline('Name the datasets directory: ')
dir.create(dir.name)
setwd(dir.name)
names(output) <- 'output'
ready.for.modelling <- lapply(datasets, function(x) dplyr::mutate(x, output))
for (i in 1:length(ready.for.modelling)) {
write.csv(ready.for.modelling[[i]], paste(names(ready.for.modelling)[[i]], '.csv', sep = ''))
}
setwd('..')
}
model.plot <- function(model = models[1,1], data) {
best.mod <- lm(model, data = data)
pred_interval <- predict(best.mod, newdata = data, interval = 'pre', level = 0.9)
plot.dat <- data.frame(cbind(data$output, pred_interval))
colnames(plot.dat) <- c('Measured', 'Predicted', 'lwr', 'upr')
rownames(plot.dat) <- row.names(data)
row.names(plot.dat) <- stringr::str_replace(row.names(plot.dat),"o_",'2-')
row.names(plot.dat) <- stringr::str_replace(row.names(plot.dat),"m_",'3-')
row.names(plot.dat) <- stringr::str_replace(row.names(plot.dat),"p_",'4-')
row.names(plot.dat) <- stringr::str_replace(row.names(plot.dat),"o4-",'2,4-')
row.names(plot.dat) <- stringr::str_replace(row.names(plot.dat),"m3-",'3,3-')
for (i in 1:nrow(plot.dat)) {
if (grepl('3-',row.names(plot.dat)[i])) {
plot.dat[i,5] <- 'meta'
}
if (grepl('2-',row.names(plot.dat)[i])) {
plot.dat[i,5] <- 'ortho'
}
if (grepl('basic',row.names(plot.dat)[i])) {
plot.dat[i,5] <- 'Ph'
}
if (grepl('4-',row.names(plot.dat)[i])) {
plot.dat[i,5] <- 'para'
}
}
plot.dat <- dplyr::mutate(plot.dat, label = row.names(plot.dat))
colnames(plot.dat)[5] <- 'Position'
plot <- ggplot(plot.dat, aes(x = Measured, y = Predicted)) +
geom_point(size = 2, shape = 15,aes(color = Position)) +
stat_smooth(aes(y = lwr), color = "cadetblue", linetype = "dashed",
se = F, method = 'lm', fullrange = T, size = 0.8) +
stat_smooth(aes(y = upr), color = "cadetblue", linetype = "dashed",
se = F, method = 'lm', fullrange = T, size = 0.8) +
labs(x = 'Measured %',y = 'Predicted %') +
stat_smooth(method = 'lm',se = F, formula = y~x,
color = 'black',fullrange = T, linetype = 'dashed') +
theme(axis.line.x = element_line(size = 1, colour = "black"),
axis.line.y = element_line(size = 1, colour = "black"),
axis.text.x = element_text(colour = "black", size = 12,face = 'bold'),
axis.text.y = element_text(colour = "black", size = 12,face = 'bold'),
axis.title.x = element_text(colour = "black", size = 12,face = 'bold'),
axis.title.y = element_text(colour = "black", size = 12,face = 'bold'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(), panel.background = element_blank(),
legend.position = c(2,2)) +
scale_color_manual(values = c(Ph = "black", meta = 'tan1',
para = '#66a182',ortho = '#d1495b')) +
xlim(min(plot.dat[,3]), max(plot.dat[,4])) +
ylim(min(plot.dat[,3]), max(plot.dat[,4])) +
coord_fixed(ratio = 1) +
geom_text_repel(size = 3,
aes(label = label),
min.segment.length = Inf,
seed = 42,
point.padding = 0.4,
segment.color = 'white',
force_pull = 0.02,
nudge_x = 0.022,
direction = 'y') +
theme(text = element_text(family = 'Helvetica'))
plot
}
library(ggplot2)
library(ggrepel)
library(extrafont)
model.info <- function(dataset, min = 2, max = floor(dim(mod_data)[1] / 5), leave.out = '', predict = F) {
print(dataset)
mod_data <- data.frame(data.table::fread(dataset, header = T, check.names = T))
RN <- mod_data[,1]
mod_data <- mod_data[,-1]
CN <- names(mod_data)
mod_data <- data.frame(cbind(scale(mod_data[,1:dim(mod_data)[2] - 1], T, T), mod_data$output))
names(mod_data) <- CN
row.names(mod_data) <- RN
pred.data <- mod_data[row.names(mod_data) == leave.out, ]
mod_data <- mod_data[row.names(mod_data) != leave.out, ]
models <- sub_model(mod_data, min = min, max = max)
tab <- knitr::kable(models)
print(tab)
what.model <- readline('Choose the model you would like to plot (line number): ')
what.model <- as.numeric(what.model)
mod.sum <- summary(lm(models[what.model, 1], mod_data))$coefficients
cat('
Model Coefficients')
colnames(mod.sum)[4] <- 'p value'
k.mod <- knitr::kable(mod.sum)
print(k.mod)
cv_3fold <- measure_cv(models[what.model,1], mod_data, dim(mod_data)[2], 3, 500)
dt3 <- data.frame(cv_3fold[[2]], cv_3fold[[1]])
names(dt3) <- c('Q2', 'MAE')
cat('
3-fold CV')
tab_dt3 <- knitr::kable(dt3)
print(tab_dt3)
cv_5fold <- measure_cv(models[what.model,1], mod_data, dim(mod_data)[2], 5, 1000)
dt5 <- data.frame(cv_5fold[[2]], cv_5fold[[1]])
names(dt5) <- c('Q2', 'MAE')
cat('
5-fold CV')
tab_dt5 <- knitr::kable(dt5)
print(tab_dt5)
if (predict == T) {
prediction <- predict(lm(models[what.model, 1], mod_data), pred.data)
real <- pred.data$output
prd.tab <- data.frame(prediction, real)
names(prd.tab) <- c('OOS Pred', 'OOS Measured')
k.prd.tab <- knitr::kable(prd.tab)
print(k.prd.tab)
}
mod_data_unn <- data.frame(data.table::fread(dataset, header = T, check.names = T))
mod.sum.unnormalized <- summary(lm(models[what.model, 1], mod_data_unn))$coefficients
cat('
Unnormalized Data Model Coefficients')
colnames(mod.sum.unnormalized)[4] <- 'p value'
k.mod.unn <- knitr::kable(mod.sum.unnormalized)
print(k.mod.unn)
## model.plot
info.table <- data.frame(matrix(ncol = 1, nrow = 4))
info.table[1,1] <- as.character(round(models[what.model, 2], 2))
info.table[2,1] <- as.character(round(models[what.model, 3], 2))
info.table[3,1] <- as.character(round(dt5[1, 1], 2))
info.table[4,1] <- as.character(round(dt3[1, 1], 2))
row.names(info.table) <-  c('R2', 'Q2_loo', 'Q2_5fold', 'Q2_3fold')
names(info.table) <- 'stats'
text1 <- paste(row.names(info.table)[1], info.table[1,1], sep = ' = ')
text2 <- paste(row.names(info.table)[2], info.table[2,1], sep = ' = ')
text3 <- paste(row.names(info.table)[3], info.table[3,1], sep = ' = ')
text4 <- paste(row.names(info.table)[4], info.table[4,1], sep = ' = ')
equation <- list()
for (i in 2:nrow(mod.sum)) {
equation[i] <- ifelse(mod.sum[i,1] < 0, paste(round(mod.sum[i,1], 2), row.names(mod.sum)[i], sep = ' * '),
paste(paste('+', round(mod.sum[i,1], 2), sep = ''), row.names(mod.sum)[i], sep = ' * '))
}
equation[1] <- as.character(round(mod.sum[1,1], 2))
equation <- paste(equation,  collapse = ' ')
annotations <- stringr::str_c(c(equation, text1, text2, text3, text4), collapse = "\n")
model = models[what.model, 1]
data = mod_data
best.mod <- lm(model, data = data)
pred_interval <- predict(best.mod, newdata = data, interval = 'pre', level = 0.9)
plot.dat <- data.frame(cbind(data$output, pred_interval))
colnames(plot.dat) <- c('Measured', 'Predicted', 'lwr', 'upr')
rownames(plot.dat) <- row.names(data)
row.names(plot.dat) <- stringr::str_replace(row.names(plot.dat),"o_",'2-')
row.names(plot.dat) <- stringr::str_replace(row.names(plot.dat),"m_",'3-')
row.names(plot.dat) <- stringr::str_replace(row.names(plot.dat),"p_",'4-')
row.names(plot.dat) <- stringr::str_replace(row.names(plot.dat),"o4-",'2,4-')
row.names(plot.dat) <- stringr::str_replace(row.names(plot.dat),"m3-",'3,3-')
for (i in 1:nrow(plot.dat)) {
if (grepl('3-',row.names(plot.dat)[i])) {
plot.dat[i,5] <- 'meta'
}
if (grepl('2-',row.names(plot.dat)[i])) {
plot.dat[i,5] <- 'ortho'
}
if (grepl('basic',row.names(plot.dat)[i])) {
plot.dat[i,5] <- 'Ph'
}
if (grepl('4-',row.names(plot.dat)[i])) {
plot.dat[i,5] <- 'para'
}
}
plot.dat <- dplyr::mutate(plot.dat, label = row.names(plot.dat))
colnames(plot.dat)[5] <- 'Position'
plot <- ggplot(plot.dat, aes(x = Measured, y = Predicted)) +
geom_point(size = 2, shape = 18,aes(color = Position)) +
stat_smooth(aes(y = lwr), color = "cadetblue", linetype = "dashed",
se = F, method = 'lm', fullrange = T, size = 0.8) +
stat_smooth(aes(y = upr), color = "cadetblue", linetype = "dashed",
se = F, method = 'lm', fullrange = T, size = 0.8) +
labs(x = 'Measured',y = 'Predicted') +
stat_smooth(method = 'lm',se = F, formula = y~x,
color = 'black',fullrange = T, linetype = 'dashed') +
theme(axis.line.x = element_line(size = 1, colour = "black"),
axis.line.y = element_line(size = 1, colour = "black"),
axis.text.x = element_text(colour = "black", size = 12,face = 'bold'),
axis.text.y = element_text(colour = "black", size = 12,face = 'bold'),
axis.title.x = element_text(colour = "black", size = 12,face = 'bold'),
axis.title.y = element_text(colour = "black", size = 12,face = 'bold'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(), panel.background = element_blank(),
legend.position = c(2,2)) +
scale_color_manual(values = c(Ph = "black", meta = 'tan1',
para = '#66a182',ortho = '#d1495b')) +
xlim(min(plot.dat[,3]), max(plot.dat[,4])) +
ylim(min(plot.dat[,3]), max(plot.dat[,4])) +
coord_fixed(ratio = 1) +
geom_text_repel(size = 3,
aes(label = label),
min.segment.length = Inf,
seed = 42,
point.padding = 0.4,
segment.color = 'white',
force_pull = 0.02,
nudge_x = 0.022,
direction = 'y') +
theme(text = element_text(family = 'Helvetica')) +
annotate('text',
x = min(plot.dat[,3]),
y = max(plot.dat[,2]), label = annotations,
parse = F,
hjust = "left", vjust = "top")
plot
}
##################################################
###############      COMP.SET      ###############
##################################################
# Use setwd('path/to/molecular_family_directory').
#
# Please execute the command comp.set() while in a family directory.
# Use the command com.set.hetero() if you wish to process a set of molecules
# that lack a benzene ring of interest.
#
# Enter a list of ring atoms with the order: primary axis - para followed by primary,
# ortho - ortho atoms relative to primary atom and meta - meta atoms relative to primary.
# For example - for a ring of atoms 1-6 where 4 is connected to the main group and 1 is para to it
# (ortho will be 3 & 5 and meta will be 2 & 6) - enter the input 1 4 3 5 2 6.
#
# Enter a list of single (not in a ring) bonds with their atoms in numeric order (increasing).
# For example - for the bonds 5-6 1-6 8-16 enter 5 6 1 6 8 16.
#
# The program will extract the stretch frequency of the specified bonds and two ring vibrations,
# the first one represents a vibration in which the bonds move perpendicular to the primary axis and the second one
# represents a parallel movement.
setwd("C:/Program Files/R/R-4.2.1/library")
library('tools')
library('plyr')
source("C:/Users/עדן/Documents/GitHub/learning_python/project/moleculaR-main/R_scripts/code/comp.set.1.1.R")
xyz_file_generator("C:/Users/עדן/Documents/GitHub/learning_python/project/main_python")
setwd("C:/Users/עדן/Documents/GitHub/learning_python/project/main_python")
swapper('csv_file_for_r_1.xyz','2 5')
coor.trans('csv_file_for_r_2.xyz','2 3 4')
coor.trans('csv_file_for_r_2.xyz','2 3 4')
new_basis<-coor.trans('csv_file_for_r_2.xyz','2 3 4')
coor.trans('csv_file_for_r_2.xyz','2 3 4')
View(coor.trans)
View(coor.trans)
View(coor.trans)
View(comp.set.hetero)
